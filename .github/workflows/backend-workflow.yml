name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-workflow.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-workflow.yml'

jobs:
  lint:
    name: Lint Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/app/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
            
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        working-directory: backend/app
        run:  |
          poetry install --with dev
        
      - name: Lint with ruff
        # there are a lot of errors, but it's ok, let's allow it to pass
        continue-on-error: true
        working-directory: backend/app
        run: poetry run ruff check
        
      - name: Check formatting with black
        working-directory: backend/app
        run: poetry run black --check . --exclude '^.*\/.venv\/.*$'
        
      - name: Type checking with mypy
        working-directory: backend/app
        run: poetry run mypy .

  test:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: ankane/pgvector:v0.4.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/app/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
            
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        working-directory: backend/app
        run: poetry install --with dev
        
      - name: Create test environment file
        run: |
          cat > backend/app/tests/test.env << EOF
          DATABASE_HOST=localhost
          DATABASE_PORT=5432
          DATABASE_USER=postgres
          DATABASE_PASSWORD=postgres
          DATABASE_NAME=test_db
          REDIS_HOST=localhost
          REDIS_PORT=6379
          SECRET_KEY=testsecretkey
          EOF
          
      - name: Run tests with pytest
        working-directory: backend/app
        run: |
          poetry run pytest tests/ --cov=app --cov-report=xml --cov-report=term
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/app/coverage.xml
          flags: backend
          fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/agentkit-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/agentkit-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/agentkit-backend:buildcache,mode=max
          
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/agentkit-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Deploy to Development Environment
        run: echo "Deploying to development environment"
        # Ici, vous pourriez ajouter des étapes pour déployer sur votre environnement de développement
        # Par exemple avec SSH, Kubernetes, ou un autre outil de déploiement

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to Production Environment
        run: echo "Deploying to production environment"
        # Ici, vous pourriez ajouter des étapes pour déployer sur votre environnement de production 